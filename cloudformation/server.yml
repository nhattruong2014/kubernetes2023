Description: Truong - Capstone

Parameters:
  EnvironmentName:
    Type: String
  InstanceType:
    Type: String
  DiskSize:
    Type: Number
  InstanceImageId:
    Type: AWS::EC2::Image::Id

Resources:
  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref InstanceImageId
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref DiskSize
            VolumeType: gp2
      SecurityGroups:
        - !Ref SecurityGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      TargetGroupARNs:
        - !Ref TargetGroup

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: target-group
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: "/"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

Outputs:
  LoadBalancerURL:
    Description: URL of the Load Balancer
    Value: !Sub "http://${LoadBalancer.DNSName}"
    Export:
      Name: !Sub "${EnvironmentName}-LoadBalancerURL"

  TargetGroupARN:
    Description: ARN of the Target Group
    Value: !Ref TargetGroup
    Export:
      Name: !Sub "${EnvironmentName}-TargetGroupARN"
      
Resources:
  EksClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole

  EksClusterPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: eks-cluster-policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - eks:DescribeCluster
            Resource: !GetAtt EksCluster.Arn
      Roles:
        - !Ref EksClusterRole

  EksCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub "${EnvironmentName}-eks-cluster"
      RoleArn: !GetAtt EksClusterRole.Arn
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Version: "1.21"


  ## Config EKS
#   ControlPlaneRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service:
#                 - eks.amazonaws.com
#             Action: sts:AssumeRole
#       Path: "/"
#       ManagedPolicyArns: 
#         - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
#         - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

#   ControlPlaneSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupDescription: Allow for EKS
#       VpcId: !Ref VPC
#       GroupName: "CapstoneProject-Capstone"
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: 10250
#           ToPort: 10250
#           CidrIp: 0.0.0.0/0
#         - IpProtocol: tcp
#           FromPort: 443
#           ToPort: 443
#           CidrIp: 0.0.0.0/0
#         - IpProtocol: tcp
#           FromPort: 53
#           ToPort: 53
#           CidrIp: 0.0.0.0/0
#         - IpProtocol: tcp
#           FromPort: 22
#           ToPort: 22
#           CidrIp: 0.0.0.0/0
#       SecurityGroupEgress:
#         - IpProtocol: -1
#           FromPort: -1
#           ToPort: -1
#           CidrIp: 0.0.0.0/0
#       Tags:
#         - Key: Name
#           Value: CapstoneSecurityGroup

#   ControlPlane:
#     Type: AWS::EKS::Cluster
#     Properties:
#       Name: !Ref AWS::StackName
#       Version: "1.25"
#       RoleArn: !GetAtt ControlPlaneRole.Arn
#       ResourcesVpcConfig:
#         SecurityGroupIds:
#           - !Ref ControlPlaneSecurityGroup
#         SubnetIds:
#           - !Ref PrivateSubnet1
#           - !Ref PrivateSubnet2
#           - !Ref PrivateSubnet3

# ## Worker
#   WorkerNodesRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           - Effect: Allow
#             Principal:
#               Service:
#                 - ec2.amazonaws.com
#             Action: sts:AssumeRole
#       Path: "/"
#       ManagedPolicyArns: 
#         - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
#         - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
#         - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

#   WorkerNodesInstanceProfile:
#     Type: AWS::IAM::InstanceProfile
#     Properties:
#       Path: "/"
#       Roles:
#         - !Ref WorkerNodesRole

#   WorkerNodesSecurityGroup:
#     Type: AWS::EC2::SecurityGroup
#     Properties:
#       GroupDescription: Security group for the nodes.
#       VpcId: !Ref VPC
#       SecurityGroupIngress:
#         - IpProtocol: tcp
#           FromPort: 0
#           ToPort: 65535
#           CidrIp: 0.0.0.0/0
#         - IpProtocol: tcp
#           FromPort: 1025
#           ToPort: 65535
#           CidrIp: 0.0.0.0/0
#         - IpProtocol: tcp
#           FromPort: 443
#           ToPort: 443
#           CidrIp: 0.0.0.0/0
#       SecurityGroupEgress:
#         - IpProtocol: tcp
#           FromPort: 0
#           ToPort: 65535
#           CidrIp: 0.0.0.0/0
#         - IpProtocol: tcp
#           FromPort: 1025
#           ToPort: 65535
#           CidrIp: 0.0.0.0/0
#         - IpProtocol: tcp
#           FromPort: 443
#           ToPort: 443
#           CidrIp: 0.0.0.0/0
#       Tags:
#         - Key: !Sub
#             - "kubernetes.io/cluster/${ControlPlane}"
#             - EksId: !Ref ControlPlane
#           Value: "owned"

#   WorkerNodegroup:
#     Type: AWS::EKS::Nodegroup
#     DependsOn: ControlPlane
#     Properties:
#       ClusterName: !Sub "${AWS::StackName}"
#       NodeRole: !GetAtt WorkerNodesRole.Arn
#       ScalingConfig:
#         MinSize: 2
#         DesiredSize: 3
#         MaxSize: 3
#       Subnets:
#         - !Ref PrivateSubnet1
#         - !Ref PrivateSubnet2
#         - !Ref PrivateSubnet3

#   WorkerNodesAutoScalingGroup:
#     Type: AWS::AutoScaling::AutoScalingGroup
#     DependsOn: ControlPlane
#     Properties:
#       LaunchConfigurationName: !Ref WorkerNodesLaunchConfiguration
#       MinSize: 3
#       MaxSize: 3
#       VPCZoneIdentifier:
#         - !Ref PrivateSubnet1
#         - !Ref PrivateSubnet2
#         - !Ref PrivateSubnet3
#       Tags:
#         - Key: Name
#           Value: !Sub "${ControlPlane}-ASG"
#           PropagateAtLaunch: "true"
#         - Key: !Sub "kubernetes.io/cluster/${ControlPlane}"
#           Value: "owned"
#           PropagateAtLaunch: "true"
#     UpdatePolicy:
#       AutoScalingRollingUpdate:
#         MinInstancesInService: 3
#         MaxBatchSize: 3

#   WorkerNodesLaunchConfiguration:
#     Type: AWS::AutoScaling::LaunchConfiguration
#     DependsOn: ControlPlane
#     Properties:
#       AssociatePublicIpAddress: "true"
#       IamInstanceProfile: !Ref WorkerNodesInstanceProfile
#       ImageId: !Ref AMItoUse
#       InstanceType: t2.medium
#       KeyName: !Ref KeyPairName
#       SecurityGroups:
#         - !Ref WorkerNodesSecurityGroup
#       BlockDeviceMappings:
#         - DeviceName: /dev/xvda
#           Ebs:
#             VolumeSize: 10
#             VolumeType: gp2
#             DeleteOnTermination: true
#       UserData:
#         Fn::Base64: !Sub |
#           #!/bin/bash
#           /usr/bin/ping -c 5 8.8.8.8 
#           set -o xtrace
#           /etc/eks/bootstrap.sh ${ControlPlane}
#           /opt/aws/bin/cfn-signal --exit-code $? --stack  ${AWS::StackName} --resource WorkerNodegroup --region ${AWS::Region}

# ## Output
#   Outputs:
#     VpcId:
#       Value: !Ref VPC
#       Description: VPC ID
#       Export:
#         Name: !Sub "${EnvironmentName}-VpcId"

#     ControlPlane:
#       Value: !Ref ControlPlane
#       Description: ControlPlane ID
#       Export:
#         Name: !Sub "${EnvironmentName}-ControlPlane"

#     ControlPlaneRole:
#       Description: role Kubernetes clusters
#       Value: !GetAtt ControlPlaneRole.Arn
#       Export:
#         Name: !Sub "${EnvironmentName}-CPR"

#     WorkerNodesRole: 
#       Description: role WorkerNodes
#       Value: !GetAtt WorkerNodesRole.Arn
#       Export:
#         Name: !Sub "${EnvironmentName}-WNR"  
